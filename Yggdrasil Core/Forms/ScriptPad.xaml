<Window x:Class="Yggdrasil_Core.Forms.ScriptPad"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Yggdrasil_Core.Forms"
        xmlns:avalon="http://icsharpcode.net/sharpdevelop/avalonedit"
        xmlns:models="clr-namespace:Yggdrasil_Core.Models"
        xmlns:utils="clr-namespace:Yggdrasil_Core.Utils"
        xmlns:vm="clr-namespace:Yggdrasil_Core.ViewModels"
        mc:Ignorable="d"
        Title="Script Pad" Height="410" Width="960" WindowStyle="ToolWindow" ResizeMode="CanMinimize">
    <Window.Resources>
        <SolidColorBrush x:Key="BackgroundBrush" Color="#0A0A0A" />
        <SolidColorBrush x:Key="ForegroundBrush" Color="#DCDCDC" />
        <SolidColorBrush x:Key="AccentBrush" Color="#1E90FF" />
        <SolidColorBrush x:Key="SecondaryBrush" Color="#202020" />
        <SolidColorBrush x:Key="BorderBrush" Color="#333333" />
        <SolidColorBrush x:Key="ConsoleBgLight" Color="#F0F0F0" />
        <SolidColorBrush x:Key="ConsoleBgDark" Color="#101010" />
        <SolidColorBrush x:Key="HPBrush" Color="#FF6B1226" />
        <SolidColorBrush x:Key="SPBrush" Color="#FF3EAACE" />
        <vm:MacroVisibilityConverter x:Key="MacroVisibilityConverter" />
        <vm:FolderVisibilityConverter x:Key="FolderVisibilityConverter" />
    </Window.Resources>
    <Grid Background="{StaticResource SecondaryBrush}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" MinWidth="220" />
            <ColumnDefinition />
            <ColumnDefinition Width="210" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
        </Grid.RowDefinitions>
        <StackPanel Grid.Column="0" Grid.Row="0" Margin="5,5,6,5" Background="{StaticResource SecondaryBrush}">
            <GroupBox Header="Specifications" Foreground="Black" Margin="5,5,5,3" FontWeight="Bold" Background="White">
                <StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,0,0,2">
                        <TextBlock Text="Name:" Foreground="Black" Width="50" VerticalAlignment="Center" />
                        <TextBox Text="{Binding CurrentMacro.Name}" Width="140"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Folder:" Foreground="Black" Width="50" VerticalAlignment="Center" />
                        <ComboBox ItemsSource="{Binding FolderNames}" SelectedItem="{Binding SelectedFolderName}" Width="140" Cursor="Hand"/>
                    </StackPanel>
                </StackPanel>
            </GroupBox>
            <GroupBox Header="Loop Settings" Foreground="Black" Margin="5,5,5,3" FontWeight="Bold" Background="White">
                <StackPanel>
                    <RadioButton Content="Toggle" IsChecked="{Binding IsToggle}" GroupName="RepeatMode" FontWeight="Bold" HorizontalAlignment="Left" Width="150" Cursor="Hand" Foreground="Black"/>
                    <StackPanel Orientation="Horizontal">
                        <RadioButton Content="Repeatedly" IsChecked="{Binding IsRepeatedly}" GroupName="RepeatMode" Width="135" Cursor="Hand" Foreground="Black"/>
                        <TextBox Text="{Binding RepeatCount}" Width="55" IsEnabled="{Binding IsRepeatedly}" />
                    </StackPanel>
                    <RadioButton Content="Hold" IsChecked="{Binding IsHold}" GroupName="RepeatMode" HorizontalAlignment="Left" Width="150" Cursor="Hand" Foreground="Black"/>
                    <RadioButton Content="Auto-Mode" IsChecked="{Binding IsAuto}" GroupName="RepeatMode" HorizontalAlignment="Left" Width="150" Cursor="Hand" Foreground="Black"/>
                </StackPanel>
            </GroupBox>
            <GroupBox Header="Triggers" Foreground="Black" Margin="5" FontWeight="Bold" Background="White">
                <StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,0,0,2">
                        <TextBlock Text="Start Key:" Foreground="Black" Width="130" VerticalAlignment="Center" Margin="0,0,5,0" />
                        <TextBox x:Name="startKeyTextBox" Text="{Binding StartKey}" IsReadOnly="True" IsEnabled="{Binding CanSetKeys}" PreviewKeyDown="StartKeyTextBox_PreviewKeyDown" Width="55" VerticalAlignment="Center" Cursor="Hand"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Stop Key:" Foreground="Black" VerticalAlignment="Center" Width="135" />
                        <TextBox x:Name="stopKeyTextBox" Text="{Binding StopKey}" IsReadOnly="True" IsEnabled="{Binding CanSetStopKey}" PreviewKeyDown="StopKeyTextBox_PreviewKeyDown" Width="55" Cursor="Hand"/>
                    </StackPanel>
                </StackPanel>
            </GroupBox>
        </StackPanel>
        <Border Grid.Column="1" Grid.Row="0" Background="{StaticResource SecondaryBrush}" BorderBrush="{StaticResource BorderBrush}" BorderThickness="1" Margin="5,5,5,70">
            <DockPanel LastChildFill="True" Margin="0,0,0,-46">
                <Button DockPanel.Dock="Bottom" Content="Save" Command="{Binding SaveMacroCommand}" Height="28" Margin="5" Width="89" HorizontalAlignment="Right" Cursor="Hand" />
                <avalon:TextEditor x:Name="scriptEditor" Document="{Binding Document}" SyntaxHighlighting="{Binding SyntaxHighlighter}" ShowLineNumbers="True" FontFamily="Consolas" FontSize="12" Foreground="White" Background="Transparent" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" BorderBrush="#FF5F5A5A" BorderThickness="1">
                    <avalon:TextEditor.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Toggle Syntax Highlighting" Command="{Binding ToggleSyntaxCommand}" />
                            <MenuItem Header="Light/Dark Mode" Command="{Binding ToggleThemeCommand}" />
                            <Separator />
                            <MenuItem Header="Insert If/Else/EndIf">
                                <MenuItem Header="Basic If" Command="{Binding InsertIfCommand}" />
                                <MenuItem Header="HP Condition" Command="{Binding InsertHPCommand}" />
                            </MenuItem>
                            <MenuItem Header="Insert Keyboard Action" Command="{Binding InsertKeyboardCommand}" />
                            <MenuItem Header="Insert Mouse Action" Command="{Binding InsertMouseCommand}" />
                            <MenuItem Header="Insert Wait" Command="{Binding InsertWaitCommand}" />
                            <MenuItem Header="Insert Function" Command="{Binding InsertFuncCommand}" />
                        </ContextMenu>
                    </avalon:TextEditor.ContextMenu>
                    <avalon:TextEditor.InputBindings>
                        <KeyBinding Key="S" Modifiers="Ctrl" Command="{Binding SaveMacroCommand}" />
                    </avalon:TextEditor.InputBindings>
                </avalon:TextEditor>
            </DockPanel>
        </Border>
        <StackPanel Grid.Column="2" Grid.Row="0" Margin="5,5,5,5" Background="{StaticResource SecondaryBrush}">
            <GroupBox Header="Macros" Foreground="Black" Margin="5" FontWeight="Bold" Background="White">
                <TreeView x:Name="macrosTreeView" ItemsSource="{Binding Folders}" utils:TreeViewExtensions.SelectedItem="{Binding SelectedTreeItem, Mode=TwoWay}" Margin="5,0,5,0" FontSize="10" AllowDrop="True" MouseMove="MacrosTreeView_PreviewMouseMove" DragOver="MacrosTreeView_DragOver" Drop="MacrosTreeView_Drop" Height="120">
                    <TreeView.ItemContainerStyle>
                        <Style TargetType="TreeViewItem">
                            <Setter Property="IsExpanded" Value="True" />
                            <Setter Property="ContextMenu">
                                <Setter.Value>
                                    <ContextMenu>
                                        <MenuItem Header="Enable/Disable" Command="{Binding PlacementTarget.DataContext.ToggleEnableCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                                        <Separator />
                                        <MenuItem Header="New Folder" Command="{Binding PlacementTarget.DataContext.CreateFolderCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                                        <MenuItem Header="Add Macro" Command="{Binding PlacementTarget.DataContext.CreateMacroCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                                        <MenuItem Header="Rename" Command="{Binding PlacementTarget.DataContext.RenameCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                                        <MenuItem Header="Delete" Command="{Binding PlacementTarget.DataContext.DeleteCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                                        <Separator />
                                        <MenuItem Header="Import Macro" Command="{Binding PlacementTarget.DataContext.ImportMacroCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                                        <MenuItem Header="Export Macro" Command="{Binding PlacementTarget.DataContext.ExportMacroCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" Visibility="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={StaticResource MacroVisibilityConverter}}" />
                                        <MenuItem Header="Import Folder" Command="{Binding PlacementTarget.DataContext.ImportFolderCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" Visibility="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={StaticResource FolderVisibilityConverter}}" />
                                        <MenuItem Header="Export Folder" Command="{Binding PlacementTarget.DataContext.ExportFolderCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" Visibility="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={StaticResource FolderVisibilityConverter}}" />
                                        <MenuItem Header="Lock/Unlock" Command="{Binding PlacementTarget.DataContext.ToggleLockFolderCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" Visibility="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={StaticResource FolderVisibilityConverter}}" />
                                    </ContextMenu>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </TreeView.ItemContainerStyle>
                    <TreeView.Resources>
                        <HierarchicalDataTemplate DataType="{x:Type models:MacroFolder}" ItemsSource="{Binding Macros}">
                            <TextBlock Text="{Binding Name}" Foreground="Black" Cursor="Hand"/>
                        </HierarchicalDataTemplate>
                        <DataTemplate DataType="{x:Type models:Macro}">
                            <TextBlock Text="{Binding Name}" Foreground="Black" Cursor="Hand"/>
                        </DataTemplate>
                    </TreeView.Resources>
                </TreeView>
            </GroupBox>
            <GroupBox Header="Profiles" Foreground="Black" Margin="5" FontWeight="Bold" Background="White">
                <ListBox ItemsSource="{Binding Profiles}" SelectedItem="{Binding SelectedProfile}" Margin="5,0,5,0" Height="120">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Name}" Foreground="Black" Cursor="Hand"/>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                    <ListBox.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Set Active" Command="{Binding SetActiveProfileCommand}" CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                            <MenuItem Header="Rename" Command="{Binding RenameProfileCommand}" CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                            <MenuItem Header="Delete" Command="{Binding DeleteProfileCommand}" CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                            <MenuItem Header="Import" Command="{Binding ImportProfileCommand}" CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
                            <MenuItem Header="Export" Command="{Binding ExportProfileCommand}" CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                        </ContextMenu>
                    </ListBox.ContextMenu>
                </ListBox>
            </GroupBox>
        </StackPanel>
    </Grid>
</Window>